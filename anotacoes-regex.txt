Link do GitHub que mostrava no curso:
https://github.com/andrechavesg/Express-es-regulares-Capturando-textos-de-forma-m-gica/

REGEX

####### CAPÍTULO 1 #######

#### Usar grep com Regex:

ls | grep -p ".*txt"

Tentei rodar o comando acima no Git Bash, mas não funcionou. grep --help apresenta algumas opções como:
-P, --perl-regexp         PATTERN is a Perl regular expression
-e, --regexp=PATTERN      use PATTERN for matching

Consegui adaptar o comando das 2 formas abaixo:
ls | grep -P ".*txt"
ls | grep -e ".*txt"

Encontra por exemplo:
anotacoes-regex.txt
respostas-capitulo4.txt

#### Usar regex no editro de texto
<div .*>

Encontra por exemplo:
<div class="form-group">

#### Regex no XSD

<xs:pattern value="([a-z])*"/>

#### Selecionar pela extensão
Target: imagem.png
Pattern: .*png

#### Achar CPF
Target:
João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro

Pattern:
\d\d\d\.\d\d\d\.\d\d\d\-\d\d
ou
\d{3}\.\d{3}\.\d{3}\-\d{2}

#### Achar CNPJ

Target: 15.123.321/8883-22
Pattern: \d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2}

##### Achar ip
Target:
126.1.112.34
128.126.12.244
192.168.0.34

Pattern: \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

#### Achar CEP
Target: João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
Pattern: \d{5}-\d{3}

#### Achar Telefone
Target: (21) 3216-2345
Pattern: \(\d{2}\) \d{4}-\d{4}

####### CAPÍTULO 2 #######

#### Achar CPF com diferentes formatações
Target:
João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
Maria Fulana, 98765432100,11 de Abril de 1995,(11) 933339871,Rua Vergueiro,3185,04101-300,São Paulo
denise teste, 987.654.321.00,28 de Dezembro de 1991,(31)45562712,SCS Qd. 8 Bl. B-50,11,70333-900,Rio Grande

Pattern:
\d{3}\.?\d{3}\.?\d{3}-?\d{2}
\d{3}\.?\d{3}\.?\d{3}[.-]?\d{2}
[0123456789]{3}\.?\d{3}\.?\d{3}[.-]?\d{2}
[0-9]{3}\.?\d{3}\.?\d{3}[.-]?\d{2}
\d{3}[.-]?\d{3}[.-]?\d{3}[.-]?\d{2}

#### Procurar <code> ou </code>
Target: No <code>for</code>, o valor de <code>i</code> começa de zero e é incrementado a cada volta enquanto <code>i < 10</code>, portando o bloco de código do for é executado 10 vezes.
Pattern: </?code>

#### Definimos uma classe com os números de 1-3 e 6-9
Target: 123456789
Pattern: [1-36-9]

#### Achar data por extenso
Target: 21 de Maio de 1993
Pattern: [0123]?\d\s+de\s+[A-Z][a-zç]{1,8}\s+de\s+[12]\d{3}

#### Achar um horário
Target: 19h32min16s
Pattern: \d{2}h\d{2}min\d{2}s

#### Achar uma placa
Target: KMG-8089
Pattern: [A-Z]{3}-\d{4}

#### O professor é amigo dos alunos, e costuma aprovar aqueles que conseguem notas de 7.2 a 7.9
Obs: Use o avaliador de expressão regular disponibilizado pelo curso.
7.[2-9]\s+-\s+\w+ Não funciona para o aluno João
O correto para esse caso em particular seria 7.[2-9]\s+-\s+[A-Z][a-zã]+

Target: 9.8 - Robson, 7.1 - Teresa, 4.5 - Armênio, 6.5 - Zulu, 7.7 - Stefania, 7.8 - João, 5.0 - Romeu, 7.2 - Pompilho, 3.1 - Reinaldo, 7.3 - Bernadete, 4.7 - Cinério 
Pattern: 7\.[2-9]\s+-\s+[^,]+

#### dar até meio ponto para que seus alunos atinjam a média 8 para serem aprovados
Target: 10 - Bruce, 9.5 - Miranda, 7.9    - Bob, 10 - Zimbabue, 7.5 - Bety
Pattern: [7]\.[5-9]\s+-\s+\w+

#### Escreva uma expressão regular que faça match apenas com as palavras GARROTE, SERROTE e ROTEIRO
Target: BALEIRO GARROTE SERROTE GOLEIRO ROTEIRO 
Pattern: [A-Z]*ROT[A-Z]+

#### Selecionar o alvo todo(apenas um match)
Target: ?classes+poderosas*
Pattern: [a-z?*+]+

####### CAPÍTULO 3 #######

#### Achar a palavra "de"
Target: de denise teste, 987.654.321-00,28 de Dezembro de 1991,(31)45562712,SCS Qd. 8 Bl. B-50,11,70333-900,Rio Grande de
Pattern: \bde\b

#### Achar aaa
Target: aaa aaaa aaa aaaa aaa
Pattern:
\baaa\b
ou
\ba{3}\b

#### Achar caminho arquivo(começa com file e termina com html)
Target: file:///Users/nico/Downloads/regex/index.html
Pattern: ^file.+html$

#### Achar CPF
Target: 111.111.111-11
Pattern: ^\d{3}\.\d{3}\.\d{3}-\d{2}$

#### Achar erros no log(começam com Caused by)
Target: Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
Pattern: ^Caused by:.*

#### Achar data
Target:
Data: 02/09/1964
ou
Data:02/09/1964

Pattern: ^Data:[\s]?[0-9]{2}\/[0-9]{2}\/[0-9]{4}$

#### Achar que termine com .html
Target:
exercicio.html
https://cursos.alura.com.br/curso.html
Leonardo criou a página meu-site.html

Pattern: .*\.html$

#### Achar a sílaba "por" dentro de uma palavra
Target: português proporcional compor
Pattern: \Bpor\B

#### OBSERVAÇÕES

Âncoras
\b - Word boundary. Antes e depois da sequência de caracteres, não pode ter word char [A-Za-z0-9_].
\B - non-word-boundary. Antes e depois da sequência de caracteres, deve ter um word char
^ é uma âncora que seleciona o início da string alvo.
$ é uma âncora que seleciona o fim do alvo.

Classes
[A-Z] - letras de A até Z
[123] - 1, 2 ou 3
\d - todos os dígitos [0-9]
\w significa word char e é uma atalho para [A-Za-z0-9_]
\s significa whitespace e é um atalho para [ \t\r\n\f]

Quantifiers
{n} - exatamente n vezes
{n,} - no mínimo n vezes
{n,m} - no mínimo n, no máximo m vezes
? - zero ou uma vez
+ - uma ou mais vezes
* - zero ou mais vezes